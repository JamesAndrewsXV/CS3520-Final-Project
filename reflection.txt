From the outset, we knew that there was a certain subset of features that our game would live and die on. These features were the random generation of the map, the generation of loot, and the combat system. With the exception of a few bugs that were found in the combat system (which will be discussed later), these features were all present in the build that we showcased at the demo. The generation of the map and the player's ability to navigate it worked properly and efficiently. Randomly generated loot was fully implemented and was able to be found by the player as they explored. We had a good set of enemies available for the player to face and they were placed properly within the game world. 

While we were able to implement most of what we wanted to for the demo, we were unable to get our inventory system working in the way that we wanted for the demo. While we have interface options (both listed in the log and displayed on the screen), we did not have them active for the player to use. The player was able to collect loot in the various rooms, but was ultimately unable to access it to use the items. 

There were two notable bugs that were found as part of the demo. The first of these was a problem that caused our battles to occasionally not properly end, and the second being a problem with our log that made it so that text could be made infinitely small as strings were repeatedly added to our buffer. 

The problem with the exit mechanic of our battle system was two fold. First, we improperly set the conditions for the game state to switch from "battle" to "explore," meaning that there were circumstances where an enemy could be defeated without the game realizing that the enemy was, in fact, dead, even if the enemy was verifiably out of hit points. As part of fixing this, we also began to address a memory issue, where the object representing our battle system was not deleted upon combat's completion, leading to the game using an increasingly large amount of memory. 

The more amusing of the bugs also occurred during combat, but had to do with our log. We found that pressing Enter during combat would repeat the last write to the log without removing any text. Pressing Enter repeatedly, therefore, would quickly cause the text to shrink (as the game automatically sizes the text to fit the on screen text box). While everything would be set right by choosing a valid combat action, we were not satisfied with this and decided to refine our code so that not only does pressing Enter in combat not cause this problem, but also so that all invalid key presses are explicitly ignored.  